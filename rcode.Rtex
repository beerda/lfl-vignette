\documentclass{article}
\usepackage[utf8]{inputenc}

\begin{document}
<<setup, include=FALSE>>=
  options(prompt='R> ', continue='+  ')
  knitr::opts_chunk$set(tidy=TRUE,
                        tidy.opts = list(width.cutoff = 70),
                        comment='',
                        prompt=TRUE,
                        highlight=FALSE)

  knit_hooks$set(export = function(before, options, envir) {
    if (before) {
      return(paste0('% --begin: "', options$export, '"\n'))
    } else {
      return(paste0('%\n% --end: "', options$export, '"\n'))
    }
  })

  library(ggplot2)

  render_sweave()
  set.seed(3243)
@


<<export='cran.lfl', eval=FALSE>>=
install.packages('lfl')
@

<<export='git.lfl', eval=FALSE>>=
install.packages('devtools')
devtools::install_github('beerda/lfl')
@

<<export='load.lfl', message=FALSE>>=
library(lfl)
@

<<export='goedel.algebra'>>=
a <- algebra('goedel')
a
@

<<export='goedel.algebra.examples'>>=
a$n(c(0.5, 0.8, 0, 1))
a$ni(c(0.5, 0.8, 0, 1))
a$t(c(0.8, 0.3), c(0.2, 1), c(1, 0))
a$pt(c(0.8, 0.3), c(0.2, 1), c(1, 0))
a$r(c(0.8, 0.3), c(0.2, 1))
@

<<export='goguen.algebra'>>=
a <- algebra('goguen')
a
@

<<export='lukasiewicz.algebra'>>=
a <- algebra('lukasiewicz')
a
@

<<export='na.algebra'>>=
a <- algebra('goedel')
a2 <- sobocinski(a)
a$t(NA, 0.3)
a2$t(NA, 0.3)
@

<<>>=
S <- matrix(c(1, 0.9, 0, 1,
              1, 0.2, 1, 0,
              0.1, 0.9, 0, 0.7,
              0.9, 0, 1, 0.1,
              0, 1, 1, 0.9), nrow=4)
colnames(S) <- c('pulm.hypertens', 'sleeping.sickn', 'malaria', 'hangover', 'influenza')
rownames(S) <- c('tiredness', 'cough', 'fever', 'blurred.vision')

R <- matrix(c(0.9, 0, 0, 0,
              1, 0.9, 0.8, 0,
              0.8, 0.8, 0.9, 1,
              0, 0.1, 0, 0.9), nrow=4)
colnames(R) <- rownames(S)
rownames(R) <- paste0('patient', 1:4)
@

<<export='comp.data'>>=
print(R)
print(S)
@

<<export='comp.basic'>>=
a <- algebra('lukasiewicz')
compose(R, S, alg=a, type='basic')
@

<<export='comp.mult'>>=
mult(R, S, function(r, s) {
  a$s(a$pt(r, s))
})
@

<<export='comp.subsupsquare'>>=
compose(R, S, alg='lukasiewicz', type='sub')
compose(R, S, alg='lukasiewicz', type='super')
compose(R, S, alg='lukasiewicz', type='square')
@

<<>>=
E <- matrix(c(0, 0, 1, 0,
              0, 0, 0, 0,
              0, 0, 0, 0,
              0, 1, 0, 0,
              0, 0, 0, 0), nrow=4)
colnames(E) <- colnames(S)
rownames(E) <- rownames(S)

U <- matrix(c(0, 0, 0, 1,
              0, 0, 0, 0,
              0, 0, 0, 0,
              0, 0, 0, 0,
              0, 1, 0, 0), nrow=4)
colnames(U) <- colnames(S)
rownames(U) <- rownames(S)
@

<<export='comp.e'>>=
print(E)
@

<<export='comp.u'>>=
print(U)
@

<<export='comp.circ.excl'>>=
a <- algebra('lukasiewicz')
RS <- compose(R, S, alg=a, type='basic')
RE <- compose(R, E, alg=a, type='basic')
a$pt(RS, a$n(RE))
@

<<export='comp.circ.unavoid'>>=
RU <- compose(R, S, alg=a, type='super')
a$pt(RS, RU)
@

<<export='comp.circ.excl.unavoid'>>=
a$pt(RS, a$n(RE), RU)
@

<<export='comp.quant.some'>>=
qsome <- quantifier('some', alg=a)
mult(R, S, function(r, s) {
  qsome(a$pt(r, s))
})
@

<<export='comp.quant.atleast'>>=
qatleast <- quantifier('at.least', n=2, alg=a)
qRS <- mult(R, S, function(r, s) {
  qatleast(a$pt(r, s))
})
print(qRS)
@

<<export='comp.quant.combined'>>=
a$pt(qRS, a$n(RE), RU)
@

<<export='ctx'>>=
ctx3(5, 100, 1000)
ctx3()
ctx3(high=100)
ctx5bilat()
ctx5bilat(negMax=-100, max=200)
@

<<export='minmax'>>=
data <- runif(n=100, min=20, max=5000)
summary(data)
minmax(data, type='ctx3')
@

<<export='minmax2'>>=
minmax(data, type='ctx3', center=1000)
@

<<export='horizon'>>=
ctx <- ctx3()
smHoriz <- horizon(ctx, atomic='sm')
smHoriz(seq(from=0, to=1, by=0.2))
@

<<horizon, fig.width=6, fig.height=2, fig.show='hide'>>=
meHoriz <- horizon(ctx, atomic='me')
biHoriz <- horizon(ctx, atomic='bi')
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
  stat_function(aes(color='sm'), fun = smHoriz) +
  stat_function(aes(color='me'), fun = meHoriz) +
  stat_function(aes(color='bi'), fun = biHoriz) +
  xlim(-0.5, 1.5) +
  labs(x='', y='', colour='atomic\nexpression')
@

<<export='hedge'>>=
veHedge <- hedge('ve')
ve.sm <- function(x) veHedge(smHoriz(x))
ve.sm(seq(from=0, to=0.5, by=0.1))
@


<<export='lingexpr'>>=
ve.sm2 <- lingexpr(ctx, atomic='sm', hedge='ve')
ve.sm2(seq(from=0, to=0.5, by=0.1))
@

<<export='emptyhedge1'>>=
emptyHedge <- hedge('-')
sm <- function(x) emptyHedge(smHoriz(x))
sm(seq(from=0, to=0.5, by=0.1))
@

<<export='emptyhedge2'>>=
sm2 <- lingexpr(ctx, atomic='sm', hedge='-')
sm2(seq(from=0, to=0.5, by=0.1))
@

<<lingexpr1, fig.width=6, fig.height=3, fig.show='hide'>>=
createListOfExpressions <- function(context, atomic, hedges) {
  res <- lapply(hedges, function(h) {
    lingexpr(context, atomic=atomic, hedge=h)
  })
  names(res) <- paste(hedges, atomic, sep='.')
  res
}

createPlot <- function(l) {
  g <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
  for (n in names(l)) {
    f <- l[[n]]
    g <- g + stat_function(aes_(color=n), fun = f)
  }
  g +
    xlim(0, 1) +
    labs(x='', y='', colour='expression')
}

ctx <- ctx3()
smList <- createListOfExpressions(ctx,  'sm',
                                  c("ex", "si", "ve", "-", "ml", "ro", "qr", "vr"))
meList <- createListOfExpressions(ctx,  'me',
                                  c("ty", "-", "ml", "ro", "qr", "vr"))
biList <- createListOfExpressions(ctx,  'bi',
                                  c("ex", "si", "ve", "-", "ml", "ro", "qr", "vr"))

createPlot(smList)
@

<<lingexpr2, fig.width=6, fig.height=3, fig.show='hide'>>=
createPlot(meList)
@

<<lingexpr3, fig.width=6, fig.height=3, fig.show='hide'>>=
createPlot(biList)
@

<<export='triangular'>>=
tri <- triangular(0, 0.5, 1)
tri(seq(from = 0, to = 1, by = 0.2))
rcos <- raisedcosine(0, 0.5, 1)
rcos(seq(from = 0, to = 1, by = 0.2))
@

<<triangular1, fig.width=3, fig.height=2, fig.show='hide'>>=
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
  stat_function(aes(color='sm'), fun = triangular(0, 0.5, 1)) +
  xlim(-0.2, 1.2) +
  labs(x='', y='') +
  theme(legend.position = 'none')
@

<<triangular2, fig.width=3, fig.height=2, fig.show='hide'>>=
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
  stat_function(aes(color='sm'), fun = triangular(-Inf, 0.5, 1)) +
  xlim(-0.2, 1.2) +
  labs(x='', y='') +
  theme(legend.position = 'none')
@

<<raisedcos1, fig.width=3, fig.height=2, fig.show='hide'>>=
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
  stat_function(aes(color='sm'), fun = raisedcosine(0, 0.5, 1)) +
  xlim(-0.2, 1.2) +
  labs(x='', y='') +
  theme(legend.position = 'none')
@

<<raisedcos2, fig.width=3, fig.height=2, fig.show='hide'>>=
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
  stat_function(aes(color='sm'), fun = raisedcosine(0, 0.5, Inf)) +
  xlim(-0.2, 1.2) +
  labs(x='', y='') +
  theme(legend.position = 'none')
@

<<export='lcut.logical'>>=
logvec <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
lcut(logvec)
lcut(logvec, name='employed')
@

<<export='lcut.factor'>>=
position <- factor(c('worker', 'manager', 'worker', 'worker', 'accountant'))
lcut(position)
@

<<export='lcut.numeric'>>=
age <- round(runif(n=5, min=18, max=65))
print(age)
lcut(age,
     context=ctx3(low=0, high=100))
@

<<export='lcut.data.frame', tidy=FALSE>>=
data <- data.frame(position=position,
                   age=age,
                   employed=logvec)
print(data)
employees <- lcut(data,
     context=ctx3(low=0, high=100),
     atomic=c('sm', 'me', 'bi'),
     hedges=c('ve', '-', 'ro'))
print(employees)
@

<<export='lcut.data.frame2', tidy=FALSE>>=
data$salary <- round(runif(n=5, min=1000, max=20000))
print(data)
employees <- lcut(data,
                  context=list(age=ctx3(low=0, high=100),
                               salary=ctx3(low=500, high=50000)),
                  atomic=list(salary=c('sm', 'bi')), # age is default
                  hedges=list(age=c('ve', '-', 'ro'),
                              salary=c('ex', 've', '-', 'ro')))
print(employees)
@

<<export='lcut.vars'>>=
vars(employees)
@

<<export='lcut.specs'>>=
specs(employees)[1:6, 1:6]
@

<<export='searchrules', tidy=FALSE>>=
rb <- searchrules(employees,
                  lhs=seq_len(ncol(employees)),
                  rhs=seq_len(ncol(employees)),
                  minSupport=0.5,
                  minConfidence=0.8,
                  maxLength=3)
print(rb)
@

<<export='searchrules2', tidy=FALSE>>=
str(rb)
@

<<export='searchrules3', tidy=FALSE>>=
as.data.frame(rb)
@

<<export='searchrules4', tidy=FALSE>>=
antecedents(rb)
consequents(rb)
@

<<export='reduce'>>=
rb <- searchrules(employees,
                  lhs=1:13,
                  rhs=14:21,
                  minSupport=0.2,
                  minConfidence=0.6,
                  maxLength=3)
reduced <- reduce(employees, rb, 0.9)
@


\end{document}
