\documentclass{article}
\usepackage[utf8]{inputenc}

\begin{document}
<<setup, include=FALSE>>=
  options(prompt='R> ')
  knitr::opts_chunk$set(tidy=TRUE,
                        comment='',
                        prompt=TRUE,
                        highlight=FALSE)

  knit_hooks$set(export = function(before, options, envir) {
    if (before) {
      return(paste0('% --begin: "', options$export, '"\n'))
    } else {
      return(paste0('%\n% --end: "', options$export, '"\n'))
    }
  })

  library(ggplot2)

  render_sweave()
  set.seed(3243)
@


<<export='cran.lfl', eval=FALSE>>=
install.packages('lfl')
@

<<export='git.lfl', eval=FALSE>>=
install.packages('devtools')
devtools::install_github('beerda/lfl')
@

<<export='load.lfl', message=FALSE>>=
library(lfl)
@

<<export='goedel.algebra'>>=
a <- algebra('goedel')
a
@

<<export='goedel.algebra.examples'>>=
a$n(c(0.5, 0.8, 0, 1))
a$ni(c(0.5, 0.8, 0, 1))
a$t(c(0.8, 0.3), c(0.2, 1), c(1, 0))
a$pt(c(0.8, 0.3), c(0.2, 1), c(1, 0))
a$r(c(0.8, 0.3), c(0.2, 1))
@

<<export='goguen.algebra'>>=
a <- algebra('goguen')
a
@

<<export='lukasiewicz.algebra'>>=
a <- algebra('lukasiewicz')
a
@

<<export='na.algebra'>>=
a <- algebra('goedel')
a2 <- sobocinski(a)
a$t(NA, 0.3)
a2$t(NA, 0.3)
@

<<export='ctx'>>=
ctx3()
ctx3(high=100)
ctx5bilat()
ctx5bilat(negMax=-100, max=200)
@

<<export='minmax'>>=
data <- runif(n=100, min=20, max=5000)
summary(data)
minmax(data, type='ctx3')
@

<<export='minmax2'>>=
minmax(data, type='ctx3', center=1000)
@

<<export='horizon'>>=
ctx <- ctx3()
smHoriz <- horizon(ctx, atomic='sm')
smHoriz(seq(from=0, to=1, by=0.2))
@

<<horizon, fig.width=6, fig.height=2, fig.show='hide'>>=
meHoriz <- horizon(ctx, atomic='me')
biHoriz <- horizon(ctx, atomic='bi')
ggplot(data = data.frame(x = 0), mapping = aes(x = x)) +
  stat_function(aes(color='sm'), fun = smHoriz) +
  stat_function(aes(color='me'), fun = meHoriz) +
  stat_function(aes(color='bi'), fun = biHoriz) +
  xlim(-0.5, 1.5) +
  labs(x='', y='', colour='atomic\nexpression')
@

<<export='hedge'>>=
veHedge <- hedge('ve')
ve.sm <- function(x) veHedge(smHoriz(x))
ve.sm(seq(from=0, to=0.5, by=0.1))
@


<<export='lingexpr'>>=
ve.sm2 <- lingexpr(ctx, atomic='sm', hedge='ve')
ve.sm2(seq(from=0, to=0.5, by=0.1))
@

<<export='emptyhedge1'>>=
emptyHedge <- hedge('-')
sm <- function(x) emptyHedge(smHoriz(x))
sm(seq(from=0, to=0.5, by=0.1))
@

<<export='emptyhedge2'>>=
sm2 <- lingexpr(ctx, atomic='sm', hedge='-')
sm2(seq(from=0, to=0.5, by=0.1))
@

<<lingexpr1, fig.width=6, fig.height=3, fig.show='hide'>>=
createListOfExpressions <- function(context, atomic, hedges) {
  res <- lapply(hedges, function(h) {
    lingexpr(context, atomic=atomic, hedge=h)
  })
  names(res) <- paste(hedges, atomic, sep='.')
  res
}

createPlot <- function(l) {
  g <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
  for (n in names(l)) {
    f <- l[[n]]
    g <- g + stat_function(aes_(color=n), fun = f)
  }
  g +
    xlim(0, 1) +
    labs(x='', y='', colour='expression')
}

ctx <- ctx3()
smList <- createListOfExpressions(ctx,  'sm',
                                  c("ex", "si", "ve", "-", "ml", "ro", "qr", "vr"))
meList <- createListOfExpressions(ctx,  'me',
                                  c("ty", "-", "ml", "ro", "qr", "vr"))
biList <- createListOfExpressions(ctx,  'bi',
                                  c("ex", "si", "ve", "-", "ml", "ro", "qr", "vr"))

createPlot(smList)
@

<<lingexpr2, fig.width=6, fig.height=3, fig.show='hide'>>=
createPlot(meList)
@

<<lingexpr3, fig.width=6, fig.height=3, fig.show='hide'>>=
createPlot(biList)
@


\end{document}
